package gnubg

import (
	"math"
	"os"
	"reflect"
	"testing"
)

func _openFile(filename string) *os.File {
	f, err := os.OpenFile(filename, os.O_RDONLY, 0644)
	if err != nil {
		panic(err)
	}
	if err = verifyWeights(f, filename); err != nil {
		panic(err)
	}
	return f
}

func Test_neuralNetEvaluateSSE(t *testing.T) {
	var nnContact _NeuralNet
	pfWeights := _openFile("../../cmd/bgweb-api/data/gnubg.weights")
	defer pfWeights.Close()
	if err := neuralNetLoad(&nnContact, pfWeights); err != nil {
		t.Errorf("error while loading nnContact: %v", err)
		return
	}

	type args struct {
		pnn     *_NeuralNet
		arInput []float32
	}
	tests := []struct {
		name string
		args args
		want [_NUM_OUTPUTS]float32
	}{
		{
			name: "should evaluate",
			args: args{
				pnn: &nnContact,
				arInput: []float32{
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.640719, 0.958333, 0.958333, 0.166667, 0.469907,
					0.861111, 0.333333, 0.694444, 0.305556, 0.093364, 0.388889, 0.151235, 0.640278,
					0.105000, 0.000000, 0.305556, 0.520000, 0.939394, 0.000000, 0.250000, 0.000000,
					0.694444, 0.000000, 0.000000, 0.000000, 0.940120, 0.791667, 0.500000, 2.000000,
					0.000000, 0.000000, 0.000000, 0.666667, 0.388889, 0.151235, 0.388889, 0.151235,
					0.567778, 0.055000, 0.000000, 0.305556, 0.880000, 0.227273, 0.000000, 0.000000,
					0.000000, 0.500000,
				},
			},
			want: [_NUM_OUTPUTS]float32{0.503016, 0.139559, 0.004474, 0.119099, 0.004688},
		},
		{
			name: "should evaluate 3-1",
			args: args{
				pnn: &nnContact,
				arInput: []float32{
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000,
					0.000000, 0.000000, 0.000000, 0.910180, 0.958333, 0.958333, 0.166667, 0.240741,
					0.722222, 0.055556, 0.611111, 0.388889, 0.151235, 0.388889, 0.151235, 0.640278,
					0.105000, 0.000000, 0.305556, 0.520000, 0.939394, 0.000000, 0.250000, 0.000000,
					0.527778, 0.000000, 0.000000, 0.000000, 0.976048, 0.916667, 0.500000, 2.000000,
					0.000000, 0.000000, 0.000000, 0.666667, 0.388889, 0.151235, 0.388889, 0.151235,
					0.588611, 0.095000, 0.000000, 0.305556, 0.940000, 0.227273, 0.000000, 0.000000,
					0.000000, 0.500000,
				},
			},
			want: [_NUM_OUTPUTS]float32{0.504503, 0.134615, 0.004168, 0.123002, 0.005468},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			var arOutput = [_NUM_OUTPUTS]float32{}
			neuralNetEvaluateSSE(tt.args.pnn, tt.args.arInput, &arOutput, nil)
			for i := range arOutput {
				// strip to 6 decimal places
				arOutput[i] = float32(math.Round(float64(arOutput[i]*1000000))) / 1000000
			}
			if !reflect.DeepEqual(arOutput, tt.want) {
				t.Errorf("neuralNetEvaluateSSE() arOutput = %v, want %v", arOutput, tt.want)
			}
		})
	}
}
